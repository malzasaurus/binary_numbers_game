'use strict';

window.app = angular.module('FullstackGeneratedApp', ['ui.router', 'ui.bootstrap', 'ngAnimate']);

app.config(function ($urlRouterProvider, $locationProvider) {
    // This turns off hashbang urls (/#about) and changes it to something normal (/about)
    $locationProvider.html5Mode(true);
    // If we go to a URL that ui-router doesn't have registered, go to the "/" url.
    $urlRouterProvider.otherwise('/');
});

app.controller('BoardCtrl', function ($window, $scope, $stateParams, players, randomNum) {

    $scope.players = players; //created in the state resolve function
    $scope.targetNum = randomNum; //determined in the state resolve function
    $scope.message = 'Target Number: ' + $scope.targetNum;
    $scope.currentTile = function (player, tile) {
        return player.activeTile === tile.index;
    };

    $scope.currentPosition = function (tile) {
        return tile.position === 1;
    };
    $scope.currentWinner = function (player) {
        if (player.currentTot === $scope.targetNum) {
            $scope.message = 'Winner: Player ' + player.playerID + '!';
            return true;
        } else {
            return false;
        }
        // return player.currentTot === $scope.targetNum;
    };

    $scope.toggle = function (player, tile) {
        if (tile.position === 0) {
            player.currentTot += tile.bit;
            tile.position = 1;
        } else {
            player.currentTot -= tile.bit;
            tile.position = 0;
        }
    };
    $window.onkeydown = function (event) {
        var key = event.keyCode;
        var playerKeys = [[49, 50, 51], //player 1
        [48, 189, 187], //player 2
        [90, 88, 67], //player 3
        [188, 190, 191] //player 4
        ];

        var left = [49, 48, 90, 188];
        var flip = [50, 189, 88, 190];
        var right = [51, 187, 67, 191];
        //determine player
        var currentPlayer;
        for (var i = 0; i < $scope.players.length; i++) {
            if (playerKeys[i].indexOf(key) !== -1) {
                currentPlayer = i;
                break;
            }
        }
        var playerObj = $scope.players[currentPlayer];

        //determine command
        if (left.indexOf(key) !== -1) {
            if (playerObj.activeTile + 1 === playerObj.board.length) {
                playerObj.activeTile = 0;
            } else {
                playerObj.activeTile += 1;
            }
            $scope.$digest();
        }
        if (flip.indexOf(key) !== -1) {
            var activeTileIndex = playerObj.board.length - playerObj.activeTile - 1;
            $scope.toggle(playerObj, playerObj.board[activeTileIndex]);
            $scope.$digest();
        }
        if (right.indexOf(key) !== -1) {
            if (playerObj.activeTile === 0) {
                playerObj.activeTile = playerObj.board.length - 1;
            } else {
                playerObj.activeTile -= 1;
            }
            $scope.$digest();
        }
    };
});
app.directive('tiles', function () {
    return {
        restrict: 'E',
        templateUrl: 'js/board/tiles.html'
    };
});

app.config(function ($stateProvider) {
    $stateProvider.state('board', {
        url: '/board/:bitChoice/:playerNum',
        templateUrl: 'js/board/board.html',
        controller: 'BoardCtrl',
        resolve: {
            players: function players($stateParams) {
                //creates an array for the players to be used in ng-repeat
                //creates the board object with individual tile info
                var tileCount = +$stateParams.bitChoice;
                var keyArray = [['1', '2', '3'], ['0', '-', '='], ['z', 'x', 'c'], [',', '.', '/']];
                var playersArray = [];
                for (var x = 0; x < $stateParams.playerNum; x++) {
                    var board = [];
                    for (var i = tileCount - 1; i >= 0; i--) {
                        var bit = Math.pow(2, i);
                        board.push({ index: i, bit: bit, position: 0 });
                    }

                    playersArray[x] = { playerID: x + 1,
                        currentTot: 0,
                        activeTile: tileCount - 1,
                        leftKey: keyArray[x][0],
                        toggleKey: keyArray[x][1],
                        rightKey: keyArray[x][2],
                        board: board };
                }
                return playersArray;
            },
            randomNum: function randomNum($stateParams) {
                //determine range of number based on bits chosen
                var x = Math.pow(2, Number($stateParams.bitChoice) - 1);
                var max = 0;
                while (x % 1 === 0) {
                    //while x is not a fraction
                    max += x;
                    x /= 2;
                }
                //create random num
                return Math.floor(Math.random() * max + 1);
            }
        }
    });
});
(function () {

    'use strict';

    // Hope you didn't forget Angular! Duh-doy.

    if (!window.angular) throw new Error('I can\'t find Angular!');
})();

app.controller('HomeCtrl', function ($scope, $state) {
    $scope.feedback = {}; //will contain .level and .playerCount
    console.log($scope.feedback);
});

app.config(function ($stateProvider) {
    $stateProvider.state('home', {
        url: '/',
        templateUrl: 'js/home/home.html',
        controller: 'HomeCtrl'
    });
});

app.controller('NavbarCtrl', function ($scope, $location, $state) {
    $scope.newGame = function () {
        var path = $location.path();
        var pathIndex = path.match(/\/board\/(\d+)\/(\d+)/);
        var level = pathIndex[1];
        var playerCount = pathIndex[2];
        $state.go('board', { bitChoice: level, playerNum: playerCount }, { reload: true });
    };
    $scope.nextLevel = function () {
        var path = $location.path();
        var pathIndex = path.match(/\/board\/(\d+)\/(\d+)/);
        var level = +pathIndex[1] + 1;
        var playerCount = pathIndex[2];
        $state.go('board', { bitChoice: level, playerNum: playerCount }, { reload: true });
    };
});
app.directive('navbar', function ($rootScope, $state) {

    return {
        restrict: 'E',
        scope: {},
        templateUrl: 'js/common/directives/navbar/navbar.html',
        controller: 'NavbarCtrl',
        link: function link(scope) {

            scope.items = [{ label: 'Home', state: 'home' }];
        }

    };
});
//# sourceMappingURL=data:application/json;base64,
